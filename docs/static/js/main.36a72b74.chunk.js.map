{"version":3,"sources":["features/monsters/CreateMonster.module.scss","App.module.scss","features/monsters/Monster.module.scss","features/resetDialog/ResetDialog.module.scss","features/faq/Faq.module.scss","features/header/Header.module.scss","features/getStarted/GetStarted.module.scss","features/addButton/AddButton.module.scss","features/monsters/MonsterList.module.scss","features/monsters/monsterSlice.js","features/screenVisibility/screenVisibilitySlice.js","features/header/Header.js","features/addButton/AddButton.js","features/monsters/CreateMonster.js","features/monsters/EditMonster.js","features/faq/Faq.js","features/resetDialog/ResetDialog.js","features/monsters/Monster.js","features/monsters/MonsterList.js","features/getStarted/GetStarted.js","store.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","findMonsterById","state","id","monsters","find","monster","createSlice","name","initialState","reducers","reset","editMonster","action","payload","Object","assign","maxHp","color","createMonster","Date","getTime","currentHp","Number","push","deleteMonster","filter","decrement","decrementByAmount","increment","incrementByAmount","selectMonsters","actions","screenVisibility","faq","resetDialog","toggleScreen","screen","selectScreenVisibility","dispatch","useDispatch","useSelector","className","styles","container","linkContainer","onClick","length","button","colors","initialSelectedColor","lastUsedColor","lastUsedColorIndex","findIndex","useState","setName","setMaxHp","setColor","titleContainer","deleteButton","onSubmit","e","preventDefault","onSubmitHandler","formRow","placeholder","type","value","onChange","target","autoFocus","inputMode","pattern","radioContainer","map","colorOption","index","key","label","checked","radio","style","backgroundColor","submitContainer","submitButton","textContainer","href","buttonContainer","cancelButton","resetButton","monsterToEditHandler","hpDiff","setHpDiff","setValue","showHpDiff","setShowHpDiff","isDead","useDebouncedCallback","debouncedCallback","infoContainer","nameContainer","hpContainer","prev","transitions","useTransition","from","opacity","transform","enter","leave","config","duration","item","props","div","Monster","content","configureStore","reducer","monsterReducer","screenVisibilityReducer","Boolean","window","location","hostname","match","ReactDOM","render","store","showCreateMonster","showEditMonster","showFaq","showResetDialog","monsterToEdit","setMonsterToEdit","screenTransistion","createTransitions","editTransitions","resetTransitions","faqTransitions","useEffect","scrollTo","out","Header","GetStarted","overlay","showOverlay","CreateMonster","EditMonster","ResetDialog","Faq","bottomContainer","AddButton","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.36a72b74.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CreateMonster_container__3qxwG\",\"titleContainer\":\"CreateMonster_titleContainer__3_mOO\",\"formRow\":\"CreateMonster_formRow__2RMXb\",\"submitContainer\":\"CreateMonster_submitContainer__tkm6P\",\"submitButton\":\"CreateMonster_submitButton___bnYs\",\"deleteButton\":\"CreateMonster_deleteButton__34YqY\",\"radioContainer\":\"CreateMonster_radioContainer__1MWz2\",\"label\":\"CreateMonster_label__yXQHz\",\"radio\":\"CreateMonster_radio__1QtY9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"out\":\"App_out__2pxyq\",\"container\":\"App_container__eSJ6i\",\"overlay\":\"App_overlay__2FvzF\",\"showOverlay\":\"App_showOverlay__2FF9B\",\"bottomContainer\":\"App_bottomContainer__3BjL0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Monster_container__yDHps\",\"isDead\":\"Monster_isDead__2FqtI Monster_container__yDHps\",\"infoContainer\":\"Monster_infoContainer__2t1Tt\",\"nameContainer\":\"Monster_nameContainer__22otN\",\"hpContainer\":\"Monster_hpContainer__37g23\",\"currentHp\":\"Monster_currentHp__1GazO\",\"maxHp\":\"Monster_maxHp__1mYfQ\",\"buttonContainer\":\"Monster_buttonContainer__26ay2\",\"hpDiff\":\"Monster_hpDiff__1mVHJ\",\"show\":\"Monster_show__9bneQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ResetDialog_container__PIo56\",\"textContainer\":\"ResetDialog_textContainer__34c4X\",\"buttonContainer\":\"ResetDialog_buttonContainer__20cMi\",\"cancelButton\":\"ResetDialog_cancelButton__1OdUo\",\"resetButton\":\"ResetDialog_resetButton__hmcj9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Faq_container__2PUus\",\"titleContainer\":\"Faq_titleContainer__1uuUa\",\"textContainer\":\"Faq_textContainer__gdIH1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__2-2DW\",\"linkContainer\":\"Header_linkContainer__16eFz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"GetStarted_container__1q1Xf\",\"content\":\"GetStarted_content__1QqOl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"AddButton_button__Ac-mM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MonsterList_container__YLbeL\"};","import { createSlice } from '@reduxjs/toolkit';\n\nconst findMonsterById = (state, id) => state.monsters.find(monster => monster.id === id);\n\nexport const monsters = createSlice({\n    name: 'monsters',\n    initialState: {\n        monsters: [\n            // {\n            //     id: 0,\n            //     name: 'Goblin #1',\n            //     currentHp: 12,\n            //     maxHp: 50,\n            //     color: '#E74C3C'\n            // }\n        ],\n    },\n    reducers: {\n        reset: state => {\n            state.monsters = []\n        },\n        editMonster: (state, action) => {\n            const monster = findMonsterById(state, action.payload.id)\n\n            Object.assign(monster, {\n                name: action.payload.name,\n                maxHp: action.payload.maxHp,\n                color: action.payload.color\n            })\n        },\n        createMonster: (state, action) => {\n            action.payload.id = new Date().getTime()\n            action.payload.currentHp = Number(action.payload.maxHp)\n\n            state.monsters.push(action.payload)\n        },\n        deleteMonster: (state, action) => {\n            state.monsters = state.monsters.filter(monster => monster.id !== action.payload.id)\n        },\n        decrement: (state, action) => {\n            const monster = findMonsterById(state, action.payload.id)\n\n            monster.currentHp > 0 && monster.currentHp--\n        },\n        decrementByAmount: (state, action) => {\n            const monster = findMonsterById(state, action.payload.id)\n\n            monster.currentHp > 9 ?\n                monster.currentHp = monster.currentHp - 10 :\n                monster.currentHp = 0\n        },\n        increment: (state, action) => {\n            const monster = findMonsterById(state, action.payload.id)\n\n            monster.currentHp++\n        },\n        incrementByAmount: (state, action) => {\n            const monster = findMonsterById(state, action.payload.id)\n\n            monster.currentHp = monster.currentHp + 10\n        }\n    },\n});\n\nexport const selectMonsters = state => state.monsters.monsters;\nexport const {\n    reset,\n    editMonster,\n    createMonster,\n    deleteMonster,\n    decrement,\n    decrementByAmount,\n    increment,\n    incrementByAmount\n} = monsters.actions;\n\nexport default monsters.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const screenVisibility = createSlice({\n    name: 'screenVisibility',\n    initialState: {\n        createMonster: false,\n        editMonster: false,\n        faq: false,\n        resetDialog: false\n    },\n    reducers: {\n        toggleScreen: (state, action) => {\n            state[action.payload.screen] = !state[action.payload.screen]\n        }\n    },\n});\n\nexport const selectScreenVisibility = state => state.screenVisibility;\n\nexport const {\n    toggleScreen\n} = screenVisibility.actions;\n\nexport default screenVisibility.reducer;\n","import React from 'react';\nimport styles from './Header.module.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectMonsters } from '../monsters/monsterSlice'\nimport { toggleScreen } from '../screenVisibility/screenVisibilitySlice'\n\nexport default () => {\n    const dispatch = useDispatch();\n    const monsters = useSelector(selectMonsters)\n\n    return (\n        <header className={styles.container}>\n            <div>\n                <h1>\n                    <i className=\"fad fa-flask-potion\"></i>\n                    Hitpoint Calculator\n                </h1>\n            </div>\n            <div className={styles.linkContainer}>\n                <div onClick={() => dispatch(toggleScreen({ screen: 'faq' }))}>\n                    <i className=\"far fa-question\"></i>\n                </div>\n                <div onClick={() => monsters.length && dispatch(toggleScreen({ screen: 'resetDialog' }))}>\n                    <i className=\"far fa-redo-alt\"></i>\n                </div>\n            </div>\n        </header>\n    )\n}","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { toggleScreen } from '../screenVisibility/screenVisibilitySlice';\nimport styles from './AddButton.module.scss'\n\nexport default () => {\n    const dispatch = useDispatch()\n\n    return (\n        <div>\n            <button\n                onClick={() => dispatch(toggleScreen({screen: 'createMonster'}))}\n                className={styles.button}\n            >\n                <i className=\"far fa-plus\"></i>\n                Add monster\n            </button>\n        </div>\n    )\n}","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createMonster, selectMonsters } from './monsterSlice';\nimport { toggleScreen } from '../screenVisibility/screenVisibilitySlice';\nimport styles from './CreateMonster.module.scss';\n\nexport default () => {\n    const dispatch = useDispatch();\n    const monsters = useSelector(selectMonsters)\n\n    const colors = ['#E74C3C', '#3498DB', '#E67E22', '#2ECC71', '#9B59B6', '#1ABC9C', '#F1C40F']\n\n    let initialSelectedColor = colors[0]\n    if (monsters.length) {\n        const lastUsedColor = monsters[monsters.length - 1].color\n        const lastUsedColorIndex = colors.findIndex(color => color === lastUsedColor)\n\n        initialSelectedColor = (lastUsedColorIndex < colors.length - 1) ? colors[lastUsedColorIndex + 1] : colors[0]\n    }\n\n    const [name, setName] = useState('');\n    const [maxHp, setMaxHp] = useState('')\n    const [color, setColor] = useState(initialSelectedColor)\n\n    const onSubmitHandler = e => {\n        e.preventDefault()\n\n        if (!name.length || !maxHp || !color.length) return\n\n        dispatch(createMonster({ name, maxHp, color }))\n        dispatch(toggleScreen({ screen: 'createMonster' }))\n    };\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.titleContainer}>\n                <div>\n                    <h1>\n                        New monster\n                    </h1>\n                </div>\n                <div>\n                    <button\n                        onClick={() => dispatch(toggleScreen({ screen: 'createMonster' }))}\n                        className={styles.deleteButton}\n                    >\n                        <i className=\"far fa-trash-alt\"></i>\n                    </button>\n                </div>\n            </div>\n            <div>\n                <form onSubmit={e => onSubmitHandler(e)}>\n                    <div className={styles.formRow}>\n                        <i className=\"far fa-dragon\"></i>\n                        <input\n                            placeholder=\"Monster's name\"\n                            type='text'\n                            value={name}\n                            onChange={e => setName(e.target.value)}\n                            autoFocus\n                        />\n                    </div>\n\n                    <div className={styles.formRow}>\n                        <i className=\"far fa-flask-potion\"></i>\n                        <input\n                            placeholder=\"Max HP\"\n                            inputMode=\"numeric\"\n                            pattern=\"[0-9]*\"\n                            type='text'\n                            value={maxHp}\n                            onChange={e => setMaxHp(e.target.value)}\n                        />\n                    </div>\n\n                    <div className={styles.formRow}>\n                        <i className=\"far fa-palette\"></i>\n                        <div className={styles.radioContainer}>\n                            {\n                                colors.map((colorOption, index) => (\n                                    <div key={index}>\n                                        <label className={styles.label}>\n                                            <input\n                                                type='radio'\n                                                checked={color === colorOption}\n                                                onChange={() => setColor(colorOption)}\n                                            />\n                                            <span className={styles.radio} style={{ backgroundColor: colorOption }} />\n                                        </label>\n                                    </div>\n                                ))\n                            }\n                        </div>\n                    </div>\n\n                    <div className={styles.submitContainer}>\n                        <button type='submit' className={styles.submitButton}>\n                            <i className=\"far fa-check\"></i> Done\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { editMonster, deleteMonster } from './monsterSlice';\nimport { toggleScreen } from '../screenVisibility/screenVisibilitySlice'\nimport styles from './CreateMonster.module.scss';\n\nexport default ({ monster }) => {\n    const dispatch = useDispatch();\n    const colors = ['#E74C3C', '#3498DB', '#E67E22', '#2ECC71', '#9B59B6', '#1ABC9C', '#F1C40F']\n\n    const [name, setName] = useState(monster.name);\n    const [maxHp, setMaxHp] = useState(monster.maxHp)\n    const [color, setColor] = useState(monster.color)\n\n    const onSubmitHandler = e => {\n        e.preventDefault()\n\n        if (!name.length || !maxHp || !color.length) return\n\n        dispatch(editMonster({ id: monster.id, name, maxHp, color }))\n        dispatch(toggleScreen({ screen: 'editMonster' }))\n    };\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.titleContainer}>\n                <div>\n                    <h1>\n                        Edit monster\n                    </h1>\n                </div>\n                <div>\n                    <button\n                        onClick={() => {\n                            dispatch(deleteMonster({ id: monster.id }))\n                            dispatch(toggleScreen({ screen: 'editMonster' }))\n                        }}\n                        className={styles.deleteButton}\n                    >\n                        <i className=\"far fa-trash-alt\"></i>\n                    </button>\n                </div>\n            </div>\n            <div>\n                <form onSubmit={e => onSubmitHandler(e)}>\n                    <div className={styles.formRow}>\n                        <i className=\"far fa-dragon\"></i>\n                        <input\n                            placeholder=\"Monster's name\"\n                            type='text'\n                            value={name}\n                            onChange={e => setName(e.target.value)}\n                        />\n                    </div>\n\n                    <div className={styles.formRow}>\n                        <i className=\"far fa-flask-potion\"></i>\n                        <input\n                            placeholder=\"Max HP\"\n                            inputMode=\"numeric\"\n                            pattern=\"[0-9]*\"\n                            type='text'\n                            value={maxHp}\n                            onChange={e => setMaxHp(e.target.value)}\n                        />\n                    </div>\n\n                    <div className={styles.formRow}>\n                        <i className=\"far fa-palette\"></i>\n                        <div className={styles.radioContainer}>\n                            {\n                                colors.map((colorOption, index) => (\n                                    <div key={index}>\n                                        <label className={styles.label}>\n                                            <input\n                                                type='radio'\n                                                checked={color === colorOption}\n                                                onChange={() => setColor(colorOption)}\n                                            />\n                                            <span className={styles.radio} style={{ backgroundColor: colorOption }} />\n                                        </label>\n                                    </div>\n                                ))\n                            }\n                        </div>\n                    </div>\n\n                    <div className={styles.submitContainer}>\n                        <button type='submit' className={styles.submitButton}>\n                            <i className=\"far fa-check\"></i> Done\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport { useDispatch } from 'react-redux';\nimport { toggleScreen } from '../screenVisibility/screenVisibilitySlice'\nimport styles from './Faq.module.scss'\n\nexport default () => {\n    const dispatch = useDispatch();\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.titleContainer}>\n                <div>\n                    <h1>F.A.Q.</h1>\n                </div>\n                <div>\n                    <button onClick={() => dispatch(toggleScreen({ screen: 'faq' }))}>\n                        <i className=\"far fa-times\"></i>\n                    </button>\n                </div>\n            </div>\n            <div className={styles.textContainer}>\n                <div>\n                    <h2>What do I need the Hitpoint Calculator for?</h2>\n                    <p>This tool was created for dungeon masters that are bad at math and want to track hitpoints for multiple monsters or NPC’s.</p>\n                </div>\n\n                <div>\n                    <h2>Dungeon masters? Monsters? What are you talking about?</h2>\n                    <p>These are instructions for a satanistic cult… Just kidding, this is a tool for the game Dungeons and Dragons. Google it to find out more.</p>\n                </div>\n\n                <div>\n                    <h2>How do I use this tool?</h2>\n                    <p>Add monsters by clicking the ‘Add monster’ button at the bottom. Fill in a name for your monster (E.g. Goblin), set it’s hitpoints, change the color if you want <span>and change the amount if you want to add multiple copies. A number will be added to the copies to easily differentiate them</span>. Use the buttons below each monster in your list to substract and add hitpoints during your games.</p>\n                </div>\n\n                <div>\n                    <h2>How do I edit the monsters?</h2>\n                    <p>Change the name, hitpoints, color or delete a monster by tapping it’s name.</p>\n                </div>\n\n                <div>\n                    <h2>Can I clear the whole list?</h2>\n                    <p>Clear the list by tapping the reset button in the top right of the page.</p>\n                </div>\n\n                <div>\n                    <h2>Excuse me, but who am I talking to?</h2>\n                    <p>Hi I’m Koen. Dungeon master and webdesigner. E-mail me at <a href='mailto:dmkoen@gmail.com'>dmkoen@gmail.com</a> to talk about Dungeons and Dragons or if you have feedback on this tool.</p>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport { useDispatch } from 'react-redux';\nimport { reset } from '../monsters/monsterSlice';\nimport { toggleScreen } from '../screenVisibility/screenVisibilitySlice'\nimport styles from './ResetDialog.module.scss'\n\nexport default () => {\n    const dispatch = useDispatch();\n\n    return (\n        <div className={styles.container}>\n            <div>\n                <div className={styles.textContainer}>\n                    <div>\n                        <i className=\"far fa-dragon\"></i>\n                    </div>\n                    <h1>Do you want to clear the list of all your monsters?</h1>\n                    <p>All your added monsters will be removed.</p>\n                </div>\n                <div className={styles.buttonContainer}>\n                    <div className={styles.cancelButton}>\n                        <button onClick={() => dispatch(toggleScreen({ screen: 'resetDialog' }))}>\n                            <i className=\"far fa-times\"></i> Cancel\n                        </button>\n                    </div>\n                    <div className={styles.resetButton}>\n                        <button onClick={() => {\n                            dispatch(reset())\n                            dispatch(toggleScreen({ screen: 'resetDialog' }))\n                        }}>\n                            <i className=\"far fa-redo-alt\"></i> Clear list\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useDebouncedCallback } from 'use-debounce';\nimport styles from './Monster.module.scss'\nimport { toggleScreen } from '../screenVisibility/screenVisibilitySlice'\nimport {\n    decrement,\n    decrementByAmount,\n    increment,\n    incrementByAmount\n} from './monsterSlice';\n\nexport default ({ monster, monsterToEditHandler }) => {\n    const [hpDiff, setHpDiff] = useState(0)\n    const [value, setValue] = useState(0)\n    const [showHpDiff, setShowHpDiff] = useState(false)\n    const dispatch = useDispatch()\n    const isDead = monster.currentHp === 0\n\n    const [debouncedCallback] = useDebouncedCallback(() => {\n        setShowHpDiff(false)\n        monster.currentHp === 0 ? setValue(0) : setValue(hpDiff)\n        setHpDiff(0)\n        setShowHpDiff(true)\n    }, 700)\n\n    return (\n        <div className={isDead ? styles.isDead : styles.container}>\n            <div\n                className={styles.infoContainer}\n                onClick={() => {\n                    monsterToEditHandler(monster)\n                    dispatch(toggleScreen({ screen: 'editMonster' }))\n                }}\n            >\n                <div className={styles.nameContainer}>\n                    <span style={{ backgroundColor: monster.color }} />\n                    <h2>\n                        {monster.name}\n                    </h2>\n                </div>\n                <div className={styles.hpContainer}>\n                    {\n                        value !== 0 && monster.currentHp !== 0 && showHpDiff && (\n                            <span className={styles.hpDiff}>\n                                {value > 0 ? `+${value}` : `${value}`}\n                            </span>\n                        )\n                    }\n                    <span className={styles.currentHp}>{monster.currentHp}</span>\n                    <span className={styles.maxHp}>/{monster.maxHp}</span>\n                </div>\n            </div>\n            <div className={styles.buttonContainer}>\n                <div>\n                    <button onClick={() => {\n                        dispatch(decrementByAmount({ id: monster.id }))\n                        setHpDiff(prev => prev - 10)\n                        debouncedCallback()\n                    }}>\n                        -10\n                    </button>\n                </div>\n                <div>\n                    <button onClick={() => {\n                        dispatch(decrement({ id: monster.id }))\n                        setHpDiff(prev => prev - 1)\n                        debouncedCallback()\n                    }}>\n                        -1\n                    </button>\n                </div>\n                <div>\n                    <button onClick={() => {\n                        dispatch(increment({ id: monster.id }))\n                        setHpDiff(prev => prev + 1)\n                        debouncedCallback()\n                    }}>\n                        +1\n                    </button>\n                </div>\n                <div>\n                    <button onClick={() => {\n                        dispatch(incrementByAmount({ id: monster.id }))\n                        setHpDiff(prev => prev + 10)\n                        debouncedCallback()\n                    }}>\n                        +10\n                    </button>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport { useTransition, animated } from 'react-spring'\nimport Monster from './Monster'\nimport { useSelector } from 'react-redux'\nimport { selectMonsters } from './monsterSlice'\nimport styles from './MonsterList.module.scss'\n\nexport default ({monsterToEditHandler}) => {\n    const monsters = useSelector(selectMonsters)\n\n    const transitions = useTransition(monsters, monster => monster.id, {\n        from: { opacity: 0, transform: 'translateX(-50%)' },\n        enter: { opacity: 1, transform: 'translateX(0)' },\n        leave: { opacity: 0, transform: 'translateX(50%)' },\n        config: {\n            duration: 250\n        }\n    })\n\n    return (\n        <div className={styles.container}>\n            {\n                transitions.map(({ item, props, key }) => (\n                    <animated.div key={key} style={props}>\n                        <Monster monster={item} monsterToEditHandler={monsterToEditHandler}/>\n                    </animated.div>\n                ))\n\n            }\n        </div>\n    )\n}","import React from 'react'\nimport styles from './GetStarted.module.scss'\n\nexport default () => {\n    return (\n        <div className={styles.container}>\n            <div className={styles.content}>\n                <div>\n                    <i className=\"far fa-dragon\"></i>\n                </div>\n                <p>Add some monsters to get started</p>\n            </div>\n        </div>\n    )\n}","import { configureStore } from '@reduxjs/toolkit';\r\nimport monsterReducer from './features/monsters/monsterSlice';\r\nimport screenVisibilityReducer from './features/screenVisibility/screenVisibilitySlice'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    monsters: monsterReducer,\r\n    screenVisibility: screenVisibilityReducer\r\n  },\r\n});","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.module.scss';\r\nimport \"./fontawesome/css/all.css\";\r\nimport App from './App';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useTransition, animated } from 'react-spring';\r\nimport { useSelector } from 'react-redux'\r\nimport { selectMonsters } from './features/monsters/monsterSlice'\r\nimport Header from './features/header/Header';\r\nimport AddButton from './features/addButton/AddButton';\r\nimport CreateMonster from './features/monsters/CreateMonster';\r\nimport EditMonster from './features/monsters/EditMonster';\r\nimport Faq from './features/faq/Faq'\r\nimport ResetDialog from './features/resetDialog/ResetDialog';\r\nimport MonstersList from './features/monsters/MonsterList';\r\nimport GetStarted from './features/getStarted/GetStarted';\r\nimport styles from './App.module.scss';\r\n\r\nimport { selectScreenVisibility } from './features/screenVisibility/screenVisibilitySlice'\r\n\r\nexport default () => {\r\n  const monsters = useSelector(selectMonsters)\r\n  const showCreateMonster = useSelector(selectScreenVisibility).createMonster\r\n  const showEditMonster = useSelector(selectScreenVisibility).editMonster\r\n  const showFaq = useSelector(selectScreenVisibility).faq\r\n  const showResetDialog = useSelector(selectScreenVisibility).resetDialog\r\n  const [monsterToEdit, setMonsterToEdit] = useState({})\r\n  const screenTransistion = {\r\n    from: { opacity: 0, transform: 'translateY(-50%)' },\r\n    enter: { opacity: 1, transform: 'translateY(0px)' },\r\n    leave: { opacity: 0, transform: 'translateY(50%)' },\r\n  }\r\n  const createTransitions = useTransition(showCreateMonster, null, screenTransistion)\r\n  const editTransitions = useTransition(showEditMonster, null, screenTransistion)\r\n  const resetTransitions = useTransition(showResetDialog, null, screenTransistion)\r\n  const faqTransitions = useTransition(showFaq, null, screenTransistion)\r\n\r\n  const monsterToEditHandler = monster => setMonsterToEdit(monster)\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0)\r\n  }, [])\r\n\r\n  return (\r\n    <div className={styles.out}>\r\n\r\n      <Header />\r\n\r\n      <div className={styles.container}>\r\n\r\n        {!monsters.length && <GetStarted />}\r\n\r\n        <div>\r\n          <MonstersList monsterToEditHandler={monsterToEditHandler} />\r\n        </div>\r\n\r\n        <div className={`${styles.overlay} ${showCreateMonster ? styles.showOverlay : ''}`}>\r\n          {\r\n            createTransitions.map(({ item, key, props }) =>\r\n              item && (\r\n                <animated.div key={key} style={props}>\r\n                  <CreateMonster />\r\n                </animated.div>\r\n              )\r\n            )\r\n          }\r\n        </div>\r\n\r\n        <div className={`${styles.overlay} ${showEditMonster ? styles.showOverlay : ''}`}>\r\n          {\r\n            editTransitions.map(({ item, key, props }) =>\r\n              item && (\r\n                <animated.div key={key} style={props}>\r\n                  <EditMonster monster={monsterToEdit} />\r\n                </animated.div>\r\n              )\r\n            )\r\n          }\r\n        </div>\r\n\r\n        <div className={`${styles.overlay} ${showResetDialog ? styles.showOverlay : ''}`}>\r\n          {\r\n            resetTransitions.map(({ item, key, props }) =>\r\n              item && (\r\n                <animated.div key={key} style={props}>\r\n                  <ResetDialog />\r\n                </animated.div>\r\n              )\r\n            )\r\n          }\r\n        </div>\r\n\r\n        <div className={`${styles.overlay} ${showFaq ? styles.showOverlay : ''}`}>\r\n          {\r\n            faqTransitions.map(({ item, key, props }) =>\r\n              item && (\r\n                <animated.div key={key} style={props}>\r\n                  <Faq />\r\n                </animated.div>\r\n              )\r\n            )\r\n          }\r\n        </div>\r\n\r\n      </div>\r\n\r\n      <div className={styles.bottomContainer}>\r\n        <AddButton />\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}"],"sourceRoot":""}