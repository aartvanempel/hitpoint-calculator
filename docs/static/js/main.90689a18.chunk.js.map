{"version":3,"sources":["features/header/Header.module.scss","features/addButton/AddButton.module.scss","features/monsters/MonsterList.module.scss","features/monsters/CreateMonster.module.scss","features/monsters/monsterSlice.js","features/header/Header.js","features/addButton/AddButton.js","features/monsters/CreateMonster.js","features/monsters/Monster.js","features/monsters/MonsterList.js","store.js","serviceWorker.js","index.js","App.js","features/monsters/Monster.module.scss","App.module.scss"],"names":["module","exports","findMonsterById","state","id","monsters","find","monster","createSlice","name","initialState","currentHp","maxHp","color","reducers","reset","createMonster","action","payload","Date","getTime","Number","push","deleteMonster","filter","decrement","decrementByAmount","increment","incrementByAmount","selectMonsters","actions","dispatch","useDispatch","className","styles","container","linkContainer","onClick","showCreateMonsterHandler","button","useSelector","colors","initialSelectedColor","length","lastUsedColor","lastUsedColorIndex","findIndex","useState","setName","setMaxHp","setColor","titleContainer","onSubmit","e","preventDefault","onSubmitHandler","formRow","placeholder","type","value","onChange","target","autoFocus","radioContainer","map","colorOption","index","label","key","checked","radio","style","backgroundColor","submitContainer","submitButton","isDead","infoContainer","nameContainer","hpContainer","buttonContainer","transitions","useTransition","from","opacity","transform","enter","leave","config","duration","item","props","div","Monster","configureStore","reducer","monsterReducer","Boolean","window","location","hostname","match","ReactDOM","render","store","showCreateMonster","setShowCreateMonster","Header","bottomContainer","AddButton","overlay","showOverlay","CreateMonster","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.90689a18.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__2-2DW\",\"linkContainer\":\"Header_linkContainer__16eFz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"AddButton_button__Ac-mM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MonsterList_container__YLbeL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CreateMonster_container__3qxwG\",\"titleContainer\":\"CreateMonster_titleContainer__3_mOO\",\"formRow\":\"CreateMonster_formRow__2RMXb\",\"submitContainer\":\"CreateMonster_submitContainer__tkm6P\",\"submitButton\":\"CreateMonster_submitButton___bnYs\",\"button\":\"CreateMonster_button___fe98\",\"radioContainer\":\"CreateMonster_radioContainer__1MWz2\",\"label\":\"CreateMonster_label__yXQHz\",\"radio\":\"CreateMonster_radio__1QtY9\"};","import { createSlice } from '@reduxjs/toolkit';\n\nconst findMonsterById = (state, id) => state.monsters.find(monster => monster.id === id);\n\nexport const monsters = createSlice({\n    name: 'monsters',\n    initialState: {\n        monsters: [\n            {\n                id: 0,\n                name: 'Goblin 1',\n                currentHp: 10,\n                maxHp: 50,\n                color: '#E74C3C'\n            }\n        ],\n    },\n    reducers: {\n        reset: state => {\n            state.monsters = []\n        },\n        createMonster: (state, action) => {\n            action.payload.id = new Date().getTime()\n            action.payload.currentHp = Number(action.payload.maxHp)\n\n            state.monsters.push(action.payload)\n        },\n        deleteMonster: (state, action) => {\n            state.monsters = state.monsters.filter(monster => monster.id !== action.payload.id)\n        },\n        decrement: (state, action) => {\n            const monster = findMonsterById(state, action.payload.id)\n\n            monster.currentHp > 0 && monster.currentHp--\n        },\n        decrementByAmount: (state, action) => {\n            const monster = findMonsterById(state, action.payload.id)\n\n            monster.currentHp > 9 ?\n                monster.currentHp = monster.currentHp - 10 :\n                monster.currentHp = 0\n        },\n        increment: (state, action) => {\n            const monster = findMonsterById(state, action.payload.id)\n\n            monster.currentHp++\n        },\n        incrementByAmount: (state, action) => {\n            const monster = findMonsterById(state, action.payload.id)\n\n            monster.currentHp = monster.currentHp + 10\n        }\n    },\n});\n\nexport const selectMonsters = state => state.monsters.monsters;\nexport const {\n    reset,\n    createMonster,\n    deleteMonster,\n    decrement,\n    decrementByAmount,\n    increment,\n    incrementByAmount\n} = monsters.actions;\n\nexport default monsters.reducer;\n","import React from 'react';\nimport styles from './Header.module.scss';\nimport { useDispatch } from 'react-redux';\nimport { reset } from '../monsters/monsterSlice';\n\nexport default () => {\n    const dispatch = useDispatch();\n\n    return (\n        <header className={styles.container}>\n            <div>\n                <h1>Hitpoint Calculator</h1>\n            </div>\n            <div className={styles.linkContainer}>\n                <div>\n                    <span>faq</span>\n                </div>\n                <div>\n                    <span onClick={() => dispatch(reset())}>reset</span>\n                </div>\n            </div>\n        </header>\n    )\n}","import React from 'react';\nimport styles from './AddButton.module.scss'\n\nexport default ({ showCreateMonsterHandler }) => {\n    return (\n        <div>\n            <button\n                onClick={() => showCreateMonsterHandler(true)}\n                className={styles.button}\n            >\n                + Add monster\n            </button>\n        </div>\n    )\n}","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createMonster, selectMonsters } from './monsterSlice';\nimport styles from './CreateMonster.module.scss';\n\nexport default ({ showCreateMonsterHandler }) => {\n    const dispatch = useDispatch();\n    const monsters = useSelector(selectMonsters)\n\n    const colors = ['#E74C3C', '#3498DB', '#E67E22', '#2ECC71', '#9B59B6', '#1ABC9C', '#F1C40F']\n\n    let initialSelectedColor = colors[0]\n    if (monsters.length) {\n        const lastUsedColor = monsters[monsters.length - 1].color\n        const lastUsedColorIndex = colors.findIndex(color => color === lastUsedColor)\n\n        initialSelectedColor = (lastUsedColorIndex < colors.length - 1) && colors[lastUsedColorIndex + 1]\n    }\n\n\n    const [name, setName] = useState('');\n    const [maxHp, setMaxHp] = useState('')\n    const [color, setColor] = useState(initialSelectedColor)\n\n    const onSubmitHandler = e => {\n        e.preventDefault()\n\n        if (!name.length || !maxHp.length || !color) return\n\n        dispatch(createMonster({ name, maxHp, color }))\n        showCreateMonsterHandler(false)\n    };\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.titleContainer}>\n                <div>\n                    <h1>\n                        New monster\n                    </h1>\n                </div>\n                <div>\n                    <button\n                        onClick={() => showCreateMonsterHandler(false)}\n                        className={styles.button}\n                    >\n                        close\n                    </button>\n                </div>\n            </div>\n            <div>\n                <form onSubmit={e => onSubmitHandler(e)}>\n                    <div className={styles.formRow}>\n                        <input\n                            placeholder=\"Monster's name\"\n                            type='text'\n                            value={name}\n                            onChange={e => setName(e.target.value)}\n                            autoFocus\n                        />\n                    </div>\n\n                    <div className={styles.formRow}>\n                        <input\n                            placeholder=\"Max HP\"\n                            type='number'\n                            value={maxHp}\n                            onChange={e => setMaxHp(e.target.value)}\n                        />\n                    </div>\n\n                    <div className={`${styles.formRow} ${styles.radioContainer}`}>\n                        {\n                            colors.map((colorOption, index) => (\n                                <div>\n                                    <label className={styles.label} key={index}>\n                                        <input\n                                            type='radio'\n                                            checked={color === colorOption}\n                                            onChange={() => setColor(colorOption)}\n                                        />\n                                        <span className={styles.radio} style={{ backgroundColor: colorOption }} />\n                                    </label>\n                                </div>\n                            ))\n                        }\n                    </div>\n\n                    <div className={styles.submitContainer}>\n                        <button type='submit' className={styles.submitButton}>\n                            ✓ Done\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport styles from './Monster.module.scss'\nimport {\n    decrement,\n    decrementByAmount,\n    increment,\n    incrementByAmount\n} from './monsterSlice';\n\nexport default ({ monster }) => {\n    const dispatch = useDispatch()\n    const isDead = monster.currentHp === 0\n\n    return (\n        <div className={`${isDead ? styles.isDead : styles.container}`}>\n            <div className={styles.infoContainer}>\n                <div className={styles.nameContainer}>\n                    <span style={{backgroundColor: monster.color}}/>\n                    <h2>{monster.name}</h2>\n                </div>\n                <div className={styles.hpContainer}>\n                    <span className={styles.currentHp}>{monster.currentHp}</span>\n                    <span className={styles.maxHp}>/{monster.maxHp}</span>\n                </div>\n            </div>\n            <div className={styles.buttonContainer}>\n                <div>\n                    <button onClick={() => dispatch(decrementByAmount({ id: monster.id }))}>-10</button>\n                </div>\n                <div>\n                    <button onClick={() => dispatch(decrement({ id: monster.id }))}>-1</button>\n                </div>\n                <div>\n                    <button onClick={() => dispatch(increment({ id: monster.id }))}>+1</button>\n                </div>\n                <div>\n                    <button onClick={() => dispatch(incrementByAmount({ id: monster.id }))}>+10</button>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport { useTransition, animated } from 'react-spring'\nimport Monster from './Monster'\nimport { useSelector } from 'react-redux'\nimport { selectMonsters } from './monsterSlice'\nimport styles from './MonsterList.module.scss'\n\nexport default () => {\n    const monsters = useSelector(selectMonsters)\n\n    const transitions = useTransition(monsters, monster => monster.id, {\n        from: { opacity: 0, transform: 'translateX(-50%)' },\n        enter: { opacity: 1, transform: 'translateX(0)' },\n        leave: { opacity: 0, transform: 'translateX(50%)' },\n        config: {\n            duration: 250\n        }\n    })\n\n    return (\n        <div className={styles.container}>\n            {\n                transitions.map(({ item, props, key }) => (\n                    <animated.div key={key} style={props}>\n                        <Monster monster={item} />\n                    </animated.div>\n                ))\n\n            }\n        </div>\n    )\n}","import { configureStore } from '@reduxjs/toolkit';\r\nimport monsterReducer from './features/monsters/monsterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    monsters: monsterReducer\r\n  },\r\n});","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React, { useState } from 'react';\r\nimport { useTransition, animated } from 'react-spring';\r\nimport Header from './features/header/Header';\r\nimport AddButton from './features/addButton/AddButton';\r\nimport CreateMonster from './features/monsters/CreateMonster';\r\nimport MonstersList from './features/monsters/MonsterList';\r\nimport styles from './App.module.scss';\r\n\r\nexport default () => {\r\n\r\n  const [showCreateMonster, setShowCreateMonster] = useState(false)\r\n\r\n  const showCreateMonsterHandler = value => setShowCreateMonster(value)\r\n\r\n  const transitions = useTransition(showCreateMonster, null, {\r\n    from: { opacity: 0, transform: 'translateY(-50%)' },\r\n    enter: { opacity: 1, transform: 'translateY(0px)' },\r\n    leave: { opacity: 0, transform: 'translateY(50%)' },\r\n  })\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n\r\n      <Header />\r\n\r\n      <div>\r\n        <MonstersList />\r\n      </div>\r\n\r\n      <div className={styles.bottomContainer}>\r\n        <AddButton showCreateMonsterHandler={showCreateMonsterHandler} />\r\n      </div>\r\n\r\n      <div className={`${styles.overlay} ${showCreateMonster && styles.showOverlay}`}>\r\n        {\r\n          transitions.map(({ item, key, props }) =>\r\n            item && (\r\n              <animated.div key={key} style={props}>\r\n                <CreateMonster showCreateMonsterHandler={showCreateMonsterHandler} />\r\n              </animated.div>\r\n            )\r\n          )\r\n        }\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Monster_container__yDHps\",\"isDead\":\"Monster_isDead__2FqtI Monster_container__yDHps\",\"infoContainer\":\"Monster_infoContainer__2t1Tt\",\"nameContainer\":\"Monster_nameContainer__22otN\",\"hpContainer\":\"Monster_hpContainer__37g23\",\"currentHp\":\"Monster_currentHp__1GazO\",\"maxHp\":\"Monster_maxHp__1mYfQ\",\"buttonContainer\":\"Monster_buttonContainer__26ay2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__eSJ6i\",\"overlay\":\"App_overlay__2FvzF\",\"showOverlay\":\"App_showOverlay__2FF9B\",\"bottomContainer\":\"App_bottomContainer__3BjL0\"};"],"sourceRoot":""}